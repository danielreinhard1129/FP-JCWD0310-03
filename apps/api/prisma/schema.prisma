// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  fullName         String?
  email            String
  password         String?
  isVerify         Boolean?           @default(false)
  role             Role               @default(CUSTOMER)
  profilePic       String?
  token            String?            @db.LongText()
  createdAt        DateTime           @default(now())
  isDelete         Boolean            @default(false)
  Employee         Employee?
  Address          Address[]
  PickupOrder      PickupOrder[]
  deliverOrder     DeliverOrder[]
  UserNotification UserNotification[]

  @@map("users")
}

enum Role {
  SUPER_ADMIN
  OUTLET_ADMIN
  WORKER
  DRIVER
  CUSTOMER
}

model Employee {
  id           Int                @id @default(autoincrement())
  workShift    EmployeeWorkShift?
  isSuperAdmin Boolean            @default(false)
  station      EmployeeStation?
  userId       Int                @unique
  outletId     Int?

  outlet               Outlet?                @relation(fields: [outletId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])
  PickupOrder          PickupOrder[]
  deliverOrder         DeliverOrder[]
  OrderWorker          OrderWorker[]
  EmployeeNotification EmployeeNotification[]

  @@map("employees")
}

enum EmployeeWorkShift {
  DAY
  NIGHT
}

enum EmployeeStation {
  WASHING
  IRONING
  PACKING
}

model Address {
  id        Int     @id @default(autoincrement())
  address   String
  city      String
  isPrimary Boolean @default(true)
  latitude  String
  longitude String
  isDelete  Boolean @default(false)
  outletId  Int
  userId    Int

  outlet Outlet @relation(fields: [outletId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Outlet {
  id          Int           @id @default(autoincrement())
  outletName  String
  outletType  OutletType
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isDelete    Boolean       @default(false)
  Employee    Employee[]
  Address     Address[]
  PickupOrder PickupOrder[]

  @@map("outlets")
}

enum OutletType {
  MAIN
  BRANCH
}

model PickupOrder {
  id             Int          @id @default(autoincrement())
  pickupNumber   String       @unique
  pickupStatus   PickupStatus @default(Waiting_for_Driver)
  distance       Int
  pickupPrice    Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int
  outletId       Int?
  isOrderCreated Boolean      @default(false)
  driverId       Int?

  user   User      @relation(fields: [userId], references: [id])
  outlet Outlet?   @relation(fields: [outletId], references: [id])
  Order  Order[]
  driver Employee? @relation(fields: [driverId], references: [id])

  @@map("pickupOrders")
}

enum PickupStatus {
  Waiting_for_Driver
  On_The_Way_to_Client
  On_The_Way_to_Outlet
  Received_by_Outlet
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String
  orderStatus   OrderStatus @default(Waiting_for_Driver_Pickup)
  weight        Int
  laundryPrice  Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pickupOrderId Int         @unique

  pickupOrder  PickupOrder    @relation(fields: [pickupOrderId], references: [id])
  OrderItem    OrderItem[]
  deliverOrder DeliverOrder[]
  OrderWorker  OrderWorker[]

  @@map("orders")
}

enum OrderStatus {
  Waiting_for_Driver_Pickup
  Laundry_On_The_Way_To_Outlet
  Laundry_Has_Arrived_At_Outlet
  Laundry_Being_Washed
  Laundry_Being_Ironed
  Laundry_Being_Packed
  Awaiting_Payment
  Laundry_Being_Delivered_To_Customer
  Laundry_Received_By_Customer
}

model OrderItem {
  id            Int @id @default(autoincrement())
  qty           Int
  orderId       Int
  laundryItemId Int

  laundryItem LaundryItem @relation(fields: [laundryItemId], references: [id])
  order       Order       @relation(fields: [orderId], references: [id])

  @@map("orderItems")
}

model LaundryItem {
  id        Int         @id @default(autoincrement())
  itemName  String
  isDelete  Boolean     @default(false)
  OrderItem OrderItem[]

  @@map("laundryItems")
}

model DeliverOrder {
  id            Int           @id @default(autoincrement())
  deliverNumber String        @unique
  deliverStatus DeliverStatus @default(Waiting_for_Driver)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        Int
  driverId      Int?
  orderId       Int

  user   User      @relation(fields: [userId], references: [id])
  driver Employee? @relation(fields: [driverId], references: [id])
  order  Order     @relation(fields: [orderId], references: [id])

  @@map("deliverOrders")
}

enum DeliverStatus {
  Waiting_for_Driver
  On_The_Way_to_Outlet
  On_The_Way_to_Client
  Received_by_Client
}

model OrderWorker {
  id       Int @id @default(autoincrement())
  orderId  Int
  workerId Int

  order  Order    @relation(fields: [orderId], references: [id])
  worker Employee @relation(fields: [workerId], references: [id])

  @@map("orderWorkers")
}

model EmployeeNotification {
  id         Int      @id @default(autoincrement())
  message    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
  employeeId Int

  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("employeeNotifications")
}

model UserNotification {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  userId    Int

  user User @relation(fields: [userId], references: [id])

  @@map("userNotifications")
}
