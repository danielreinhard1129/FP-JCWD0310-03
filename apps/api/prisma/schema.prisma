// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  fullName    String?
  email       String
  password    String?
  isVerify    Boolean?      @default(false)
  role        Role          @default(CUSTOMER)
  profilePic  String?
  token       String?       @db.LongText()
  createdAt   DateTime      @default(now())
  isDelete    Boolean       @default(false)
  Employee    Employee?
  Address     Address[]
  PickupOrder PickupOrder[]

  @@map("users")
}

enum Role {
  SUPER_ADMIN
  OUTLET_ADMIN
  WORKER
  DRIVER
  CUSTOMER
}

model Employee {
  id Int @id @default(autoincrement())

  workShift    EmployeeWorkShift?
  isSuperAdmin Boolean            @default(false)

  station EmployeeStation?
  userId  Int              @unique

  outletId Int?

  outlet Outlet? @relation(fields: [outletId], references: [id])
  user   User    @relation(fields: [userId], references: [id])

  @@map("employees")
}

enum EmployeeWorkShift {
  DAY
  NIGHT
}

enum EmployeeStation {
  WASHING
  IRONING
  PACKING
}

model Address {
  id        Int     @id @default(autoincrement())
  address   String
  city      String
  isPrimary Boolean @default(true)
  latitude  String
  longitude String
  isDelete  Boolean @default(false)
  outletId  Int
  userId    Int

  outlet Outlet @relation(fields: [outletId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Outlet {
  id          Int           @id @default(autoincrement())
  outletName  String
  outletType  OutletType
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isDelete    Boolean       @default(false)
  Employee    Employee[]
  Address     Address[]
  PickupOrder PickupOrder[]

  @@map("outlets")
}

enum OutletType {
  MAIN
  BRANCH
}

model PickupOrder {
  id             Int          @id @default(autoincrement())
  pickupNumber   String       @unique
  pickupStatus   PickupStatus @default(Waiting_for_Driver)
  distance       Int
  pickupPrice    Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int
  outletId       Int?
  isOrderCreated Boolean      @default(false)

  user   User    @relation(fields: [userId], references: [id])
  outlet Outlet? @relation(fields: [outletId], references: [id])
  Order  Order[]

  @@map("pickupOrders")
}

enum PickupStatus {
  Waiting_for_Driver
  On_The_Way_to_Client
  On_The_Way_to_Outlet
  Received_by_Outlet
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String
  orderStatus   OrderStatus @default(Waiting_for_Driver_Pickup)
  weight        Int
  laundryPrice  Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pickupOrderId Int         @unique

  pickupOrder PickupOrder @relation(fields: [pickupOrderId], references: [id])
  OrderItem   OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  Waiting_for_Driver_Pickup
  Laundry_On_The_Way_To_Outlet
  Laundry_Has_Arrived_At_Outlet
  Laundry_Being_Washed
  Laundry_Being_Ironed
  Laundry_Being_Packed
  Awaiting_Payment
  Laundry_Being_Delivered_To_Customer
  Laundry_Received_By_Customer
}

model OrderItem {
  id            Int @id @default(autoincrement())
  qty           Int
  orderId       Int
  laundryItemId Int

  laundryItem LaundryItem @relation(fields: [laundryItemId], references: [id])
  order       Order       @relation(fields: [orderId], references: [id])

  @@map("orderItems")
}

model LaundryItem {
  id        Int         @id @default(autoincrement())
  itemName  String
  isDelete  Boolean     @default(false)
  OrderItem OrderItem[]

  @@map("laundryItems")
}
